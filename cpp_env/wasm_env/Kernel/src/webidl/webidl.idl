interface ArrayBuffer_d {
    void ArrayBuffer_d();
    attribute VoidPtr data;
    attribute long length;
};

interface Timetensor_d {
    void Timetensor_d();

    void getData([Ref] ArrayBuffer_d result);

    attribute long length;
    attribute long nBands;
    attribute long nChannels;
    attribute boolean isCov;
};

interface Timeseries_d {
    void Timeseries_d([Const] long nChannels, [Const] long nBands, [Const] long sampleRate, [Const] long expectedTimesteps);

    void addTimestep(double[] timestep);

    [Const] long getLength();

    void clear();

    void loadCachedTensor(double[] data, long nTimesteps, boolean isCov, [Ref] Timetensor_d result);

    void popAll([Ref] Timetensor_d result);

    void popN(long n, [Ref] Timetensor_d result);

    void getNLastSteps(long n, [Ref] Timetensor_d result);

};

enum EMetric {
  "EMetric::ALE",
  "EMetric::Riemann",
  "EMetric::Euclidian",
  "EMetric::LogEuclidian",
  "EMetric::LogDet",
  "EMetric::Kullback",
  "EMetric::Harmonic",
  "EMetric::Wasserstein",
  "EMetric::Identity"
};

interface RiemannKernel_d {
    void RiemannKernel_d();

    void addTrial([Ref] Timetensor_d trial);

    void addBreak([Ref] Timetensor_d break_);

	[Ref] ArrayBuffer_d fitTrials([Ref] ArrayBuffer_d result);

    EMetric getMeanMetric();

    [Const] DOMString getCommaSeparatedMeanMetrics();

    [Const] DOMString setMeanMetric(EMetric metric);

    void fitBreaks();

    void reset();

	[Ref] ArrayBuffer_d apply([Ref] Timetensor_d trial, [Ref] ArrayBuffer_d result);

    
};


